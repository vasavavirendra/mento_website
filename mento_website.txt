import React, { useState, useEffect } from 'react';
import { Trophy, Coins } from 'lucide-react';

export default function ColorPredictionGame() {
    const [balance, setBalance] = useState(1000);
    const [betAmount, setBetAmount] = useState(10);
    const [selectedColor, setSelectedColor] = useState(null);
    const [result, setResult] = useState(null);
    const [history, setHistory] = useState([]);
    const [isSpinning, setIsSpinning] = useState(false);
    const [gameNumber, setGameNumber] = useState(1);

    const colors = [
        { name: 'Red', value: 'red', multiplier: 2, bg: 'bg-red-500' },
        { name: 'Green', value: 'green', multiplier: 2, bg: 'bg-green-500' },
        { name: 'Violet', value: 'violet', multiplier: 4.5, bg: 'bg-purple-500' }
    ];

    const selectColor = (color) => {
        if (!isSpinning) {
            setSelectedColor(color);
            setResult(null);
        }
    };

    const placeBet = () => {
        if (!selectedColor || betAmount <= 0 || betAmount > balance || isSpinning) return;

        setIsSpinning(true);
        setBalance(balance - betAmount);

        setTimeout(() => {
            // Random result with weighted probability (Violet is rarer)
            const rand = Math.random();
            let winningColor;
            if (rand < 0.1) {
                winningColor = 'violet';
            } else if (rand < 0.55) {
                winningColor = 'red';
            } else {
                winningColor = 'green';
            }

            const colorData = colors.find(c => c.value === winningColor);
            const won = selectedColor === winningColor;
            const winAmount = won ? Math.floor(betAmount * colorData.multiplier) : 0;

            if (won) {
                setBalance(prev => prev + winAmount);
            }

            setResult({
                color: winningColor,
                won: won,
                amount: winAmount
            });

            setHistory(prev => [
                { number: gameNumber, color: winningColor, result: won ? 'Win' : 'Loss', amount: won ? winAmount : -betAmount },
                ...prev.slice(0, 9)
            ]);

            setGameNumber(prev => prev + 1);
            setIsSpinning(false);
        }, 2000);
    };

    const getColorBg = (colorValue) => {
        const color = colors.find(c => c.value === colorValue);
        return color ? color.bg : 'bg-gray-500';
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 p-4">
            <div className="max-w-4xl mx-auto">
                {/* Header */}
                <div className="text-center mb-6">
                    <h1 className="text-4xl font-bold text-white mb-2 flex items-center justify-center gap-2">
                        <Trophy className="text-yellow-400" />
                        Color Prediction
                    </h1>
                    <div className="flex items-center justify-center gap-2 text-2xl font-bold text-yellow-400">
                        <Coins />
                        <span>{balance.toLocaleString()} coins</span>
                    </div>
                </div>

                {/* Game Area */}
                <div className="bg-white/10 backdrop-blur-lg rounded-3xl p-8 mb-6 border border-white/20">
                    <div className="text-center mb-6">
                        <div className="text-white text-lg mb-2">Game #{gameNumber}</div>
                        {isSpinning && (
                            <div className="text-yellow-400 text-xl font-bold animate-pulse">
                                Drawing Result...
                            </div>
                        )}
                    </div>

                    {/* Result Display */}
                    {result && !isSpinning && (
                        <div className="mb-6 text-center">
                            <div className={`inline-block ${getColorBg(result.color)} text-white px-8 py-4 rounded-2xl text-2xl font-bold mb-3`}>
                                {result.color.toUpperCase()}
                            </div>
                            <div className={`text-2xl font-bold ${result.won ? 'text-green-400' : 'text-red-400'}`}>
                                {result.won ? `üéâ YOU WON ${result.amount} COINS!` : '‚ùå TRY AGAIN'}
                            </div>
                        </div>
                    )}

                    {/* Color Selection */}
                    <div className="grid grid-cols-3 gap-4 mb-6">
                        {colors.map(color => (
                            <button
                                key={color.value}
                                onClick={() => selectColor(color.value)}
                                disabled={isSpinning}
                                className={`${color.bg} text-white rounded-2xl p-6 text-xl font-bold transition-all transform hover:scale-105 ${selectedColor === color.value ? 'ring-4 ring-yellow-400 scale-105' : ''
                                    } ${isSpinning ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-2xl'}`}
                            >
                                <div>{color.name}</div>
                                <div className="text-sm mt-2">{color.multiplier}x</div>
                            </button>
                        ))}
                    </div>

                    {/* Bet Amount */}
                    <div className="mb-6">
                        <label className="text-white text-lg mb-2 block">Bet Amount:</label>
                        <input
                            type="number"
                            value={betAmount}
                            onChange={(e) => setBetAmount(Math.max(1, parseInt(e.target.value) || 0))}
                            disabled={isSpinning}
                            className="w-full bg-white/20 text-white text-xl px-4 py-3 rounded-xl border border-white/30 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                            min="1"
                            max={balance}
                        />
                        <div className="flex gap-2 mt-3">
                            {[10, 50, 100, 500].map(amount => (
                                <button
                                    key={amount}
                                    onClick={() => setBetAmount(amount)}
                                    disabled={isSpinning}
                                    className="flex-1 bg-white/20 text-white px-4 py-2 rounded-lg hover:bg-white/30 transition-all disabled:opacity-50"
                                >
                                    {amount}
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* Place Bet Button */}
                    <button
                        onClick={placeBet}
                        disabled={!selectedColor || betAmount <= 0 || betAmount > balance || isSpinning}
                        className="w-full bg-gradient-to-r from-yellow-400 to-orange-500 text-white text-2xl font-bold py-4 rounded-2xl hover:from-yellow-500 hover:to-orange-600 disabled:opacity-50 disabled:cursor-not-allowed transform transition-all hover:scale-105 shadow-2xl"
                    >
                        {isSpinning ? 'SPINNING...' : 'PLACE BET'}
                    </button>
                </div>

                {/* History */}
                {history.length > 0 && (
                    <div className="bg-white/10 backdrop-blur-lg rounded-3xl p-6 border border-white/20">
                        <h2 className="text-white text-2xl font-bold mb-4">Recent Results</h2>
                        <div className="space-y-2">
                            {history.map((item, idx) => (
                                <div key={idx} className="bg-white/10 rounded-xl p-3 flex items-center justify-between">
                                    <div className="flex items-center gap-3">
                                        <span className="text-white/60">#{item.number}</span>
                                        <div className={`${getColorBg(item.color)} w-16 h-8 rounded-lg`}></div>
                                    </div>
                                    <span className={`font-bold ${item.amount > 0 ? 'text-green-400' : 'text-red-400'}`}>
                                        {item.amount > 0 ? '+' : ''}{item.amount}
                                    </span>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}